import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from flask import Flask
from flask_restful import reqparse, abort, Api, Resource

def ChestPainType_to_numeric(x):
        if x=='TA': return 4
        if x=='ATA': return 3
        if x=='NAP':   return 2
        if x=='ASY':   return 1
    
def gender_to_numeric(x):
        if x=='F': return 2
        if x=='M':   return 1
    
def RestingECG_to_numeric(x):
        if x=='Normal': return 3
        if x=='ST':   return 2
        if x=='LVH':   return 1
    
def ExerciseAngina_to_numeric(x):
        if x=='Y': return 2
        if x=='N':   return 1
    
def ST_Slope_to_numeric(x):
        if x=='Up': return 3
        if x=='Flat':   return 2
        if x=='Down':   return 1
    
    

data = pd.read_csv("heart.csv")
data['ExerciseAngina_num'] = data['ExerciseAngina'].apply(ExerciseAngina_to_numeric)
data['ChestPainType_num'] = data['ChestPainType'].apply(ChestPainType_to_numeric)
data['gender_num'] = data['Sex'].apply(gender_to_numeric)
data['RestingECG_num'] = data['RestingECG'].apply(RestingECG_to_numeric)
data['ST_Slope_num'] = data['ST_Slope'].apply(ST_Slope_to_numeric)

model = LinearRegression()
model.fit(data[['Age','gender_num','ChestPainType_num','RestingBP','Cholesterol','FastingBS','RestingECG_num','MaxHR','ExerciseAngina_num','Oldpeak','ST_Slope_num']],data.HeartDisease)

app = Flask(__name__)
api = Api(app)


parser = reqparse.RequestParser()
parser.add_argument('Age')
parser.add_argument('Sex')
parser.add_argument('ChestPainType')
parser.add_argument('RestingBP')
parser.add_argument('Cholesterol')
parser.add_argument('FastingBS')
parser.add_argument('RestingECG')
parser.add_argument('MaxHR')
parser.add_argument('ExerciseAngina')
parser.add_argument('Oldpeak')
parser.add_argument('ST_Slope')

# Age = 40
# Sex = 1
# ChestPainType = 3
# RestingBP = 140
# Cholesterol = 289
# FastingBS = 0
# RestingECG = 3
# MaxHR = 172
# ExerciseAngina = 1
# Oldpeak = 0.0
# ST_Slope = 3



# Todo
# shows a single todo item and lets you delete a todo item
class Heart(Resource):
    def post(self):
        args = parser.parse_args()
        print (args)
        # Age = 40
        # Sex = 1
        # ChestPainType = 3
        # RestingBP = 140
        # Cholesterol = 289
        # FastingBS = 0
        # RestingECG = 3
        # MaxHR = 172
        # ExerciseAngina = 1
        # Oldpeak = 0.0
        # ST_Slope = 3

        output = model.predict([[40,1,3,140,289,0,3,172,1,0.0,3]])
        print ("-------------------",output)
        # result = model.coef_[0] * Age + model.coef_[1] * Sex + model.coef_[2] * ChestPainType + model.coef_[3] * RestingBP + model.coef_[4] * Cholesterol + model.coef_[5] * FastingBS + model.coef_[6] * RestingECG + model.coef_[7] * MaxHR + model.coef_[8] * ExerciseAngina + model.coef_[9] * Oldpeak + model.coef_[10] * ST_Slope + model.coef_[5] * 0 + model.intercept_
        
        # rdict = {'HeartDisease': np.random.random()}
        rdict = {'HeartDisease': output[0]}
        return rdict, 200
        

##
## Actually setup the Api resource routing here
##
api.add_resource(Heart, '/heart')



if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=5000)